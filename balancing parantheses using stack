#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

char stack[MAX_SIZE];
int top = -1;

int isEmpty() {
    if (top == -1)
        return 1;
    else
        return 0;
}

void push(char ch) {
    if (top == MAX_SIZE - 1) {
        printf("Stack is full. Cannot push element.\n");
        return;
    }
    top++;
    stack[top] = ch;
}

char pop() {
    if (isEmpty()) {
        printf("Stack is empty. Cannot pop element.\n");
        return '\0';
    }
    char ch = stack[top];
    top--;
    return ch;
}

int isBalanced(char* expression) {
    int len = strlen(expression);
    for (int i = 0; i < len; i++) {
        if (expression[i] == '(' || expression[i] == '[' || expression[i] == '{') {
            push(expression[i]);
        } else if (expression[i] == ')' || expression[i] == ']' || expression[i] == '}') {
            if (isEmpty()) {
                return 0;
            } else {
                char ch = pop();
                if ((expression[i] == ')' && ch != '(') ||
                    (expression[i] == ']' && ch != '[') ||
                    (expression[i] == '}' && ch != '{')) {
                    return 0;
                }
            }
        }
    }
    if (isEmpty()) {
        return 1;
    } else {
        return 0;
    }
}

int main() {
    char expression[MAX_SIZE];
    printf("Enter a string of parentheses: ");
    fgets(expression, sizeof(expression), stdin);
    expression[strcspn(expression, "\n")] = '\0';

    if (isBalanced(expression)) {
        printf("The string of parentheses is balanced.\n");
    } else {
        printf("The string of parentheses is not balanced.\n");
    }

    return 0;
}

Sample Output:
```
Enter a string of parentheses








