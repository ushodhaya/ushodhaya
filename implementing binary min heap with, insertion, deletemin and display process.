#include <stdio.h>

#define MAX_HEAP_SIZE 100

int heap[MAX_HEAP_SIZE];
int heapSize = 0;

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void insert(int value) {
    if (heapSize >= MAX_HEAP_SIZE) {
        printf("Heap is full, cannot insert any more elements.\n");
        return;
    }

    heap[heapSize] = value;
    int current = heapSize;
    int parent = (current - 1) / 2;

    while (current > 0 && heap[current] < heap[parent]) {
        swap(&heap[current], &heap[parent]);
        current = parent;
        parent = (current - 1) / 2;
    }

    heapSize++;
}

void deleteMin() {
    if (heapSize <= 0) {
        printf("Heap is empty, cannot delete any element.\n");
        return;
    }

    heap[0] = heap[heapSize - 1];
    heapSize--;

    int current = 0;
    int leftChild = 2 * current + 1;
    int rightChild = 2 * current + 2;

    while ((leftChild < heapSize && heap[current] > heap[leftChild]) || (rightChild < heapSize && heap[current] > heap[rightChild])) {
        if (heap[leftChild] < heap[rightChild]) {
            swap(&heap[current], &heap[leftChild]);
            current = leftChild;
        } else {
            swap(&heap[current], &heap[rightChild]);
            current = rightChild;
        }

        leftChild = 2 * current + 1;
        rightChild = 2 * current + 2;
    }
}

void display() {
    if (heapSize <= 0) {
        printf("Heap is empty.\n");
        return;
    }

    printf("Heap elements: ");
    for (int i = 0; i < heapSize; i++) {
        printf("%d ", heap[i]);
    }
    printf("\n");
}

int main() {
    insert(5);
    insert(3);
    insert(8);
    insert(1);
    display();

    deleteMin();
1:27 pm
Forwarded
Sure, here's the continuation of the program:


    printf("After deleting the minimum element:\n");
    display();

    return 0;
}


This program implements a binary min heap using an array. The insert function inserts a new element into the heap and maintains the heap property by swapping elements if necessary. The deleteMin function removes the minimum element (root) from the heap and adjusts the heap structure accordingly. The display function prints all the elements in the heap.

Feel free to try it out and let me know if you have any questions!
1:27 pm
Sure! Here's a sample output to help you visualize how the insert function works:

Let's say we have a binary min heap with the following elements: [5, 8, 10, 12, 15].

Now, let's say we want to insert the element 6 into the heap.
