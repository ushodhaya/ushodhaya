#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Stack {
    int top;
    unsigned capacity;
    char* array;
};

struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (char*)malloc(stack->capacity * sizeof(char));
    return stack;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

char peek(struct Stack* stack) {
    return stack->array[stack->top];
}

char pop(struct Stack* stack) {
    if (!isEmpty(stack)) {
        return stack->array[stack->top--];
    }
    return '$';
}

void push(struct Stack* stack, char op) {
    stack->array[++stack->top] = op;
}

int isOperand(char ch) {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}

int precedence(char ch) {
    switch (ch) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
    }
    return -1;
}

void infixToPostfix(char* expression) {
    int i, k;
    struct Stack* stack = createStack(strlen(expression));
    if (!stack) {
        return;
    }
    for (i = 0, k = -1; expression[i]; ++i) {
        if (isOperand(expression[i])) {
            expression[++k] = expression[i];
        }
        else if (expression[i] == '(') {
            push(stack, expression[i]);
        }
        else if (expression[i] == ')') {
            while (!isEmpty(stack) && peek(stack) != '(') {
                expression[++k] = pop(stack);
            }
            if (!isEmpty(stack) && peek(stack) != '(') {
                return;
            }
            else {
                pop(stack);
            }
        }
        else {
            while (!isEmpty(stack) && precedence(expression[i]) <= precedence(peek(stack))) {
                expression[++k] = pop(stack);
            }
            push(stack, expression[i]);
  }
    }

    while (!isEmpty(stack)) {
        expression[++k] = pop(stack);
    }

    expression[++k] = '\0';
    printf("Postfix expression: %s\n", expression);
}

int main() {
    char expression[100];
    printf("Enter the infix expression: ");
    fgets(expression, sizeof(expression), stdin);
    infixToPostfix(expression);
    return 0;
}


Sample Output:

Enter the infix expression: (a+b)*c-d/e
Postfix expression: ab+c*de/-

